"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const allure_js_commons_1 = require("allure-js-commons");
class AllureReporter {
    onBegin(config, suite) {
        this.config = config;
        this.suite = suite;
    }
    onTimeout() {
        this.onEnd();
    }
    onEnd() {
        const writerForTest = process.env.PW_ALLURE_POST_PROCESSOR_FOR_TEST
            ? new allure_js_commons_1.InMemoryAllureWriter()
            : undefined;
        const resultsDir = process.env.ALLURE_RESULTS_DIR || path_1.default.join(process.cwd(), "allure-results");
        const runtime = new allure_js_commons_1.AllureRuntime({ resultsDir, writer: writerForTest });
        const processSuite = (suite, parent) => {
            const groupName = "Root";
            const group = parent.startGroup(groupName);
            for (const test of suite.tests) {
                for (const result of test.results) {
                    const startTime = result.startTime.getTime();
                    const endTime = startTime + result.duration;
                    const allureTest = group.startTest(test.title, startTime);
                    allureTest.addLabel(allure_js_commons_1.LabelName.LANGUAGE, "JavaScript");
                    allureTest.addLabel(allure_js_commons_1.LabelName.FRAMEWORK, "Playwright");
                    const [, projectSuiteTitle, fileSuiteTitle, ...suiteTitles] = suite.titlePath();
                    if (projectSuiteTitle) {
                        allureTest.addLabel(allure_js_commons_1.LabelName.PARENT_SUITE, projectSuiteTitle);
                    }
                    if (fileSuiteTitle) {
                        allureTest.addLabel(allure_js_commons_1.LabelName.SUITE, fileSuiteTitle);
                    }
                    if (suiteTitles.length > 0) {
                        allureTest.addLabel(allure_js_commons_1.LabelName.SUB_SUITE, suiteTitles.join(" > "));
                    }
                    allureTest.historyId = test.titlePath().slice(1).join(" ");
                    allureTest.fullName = test.title;
                    allureTest.status = statusToAllureStats(result.status, test.expectedStatus);
                    if (result.error) {
                        const message = result.error.message && stripAscii(result.error.message);
                        let trace = result.error.stack && stripAscii(result.error.stack);
                        if (trace && message && trace.startsWith(`Error: ${message}`)) {
                            trace = trace.substr(message.length + "Error: ".length);
                        }
                        allureTest.statusDetails = {
                            message,
                            trace,
                        };
                    }
                    for (const step of result.steps) {
                        appendStep(allureTest, step);
                    }
                    for (const attachment of result.attachments) {
                        if (!attachment.body && !attachment.path) {
                            continue;
                        }
                        let fileName;
                        if (attachment.body) {
                            fileName = runtime.writeAttachment(attachment.body, attachment.contentType);
                        }
                        else {
                            if (!fs_1.default.existsSync(attachment.path)) {
                                continue;
                            }
                            fileName = runtime.writeAttachmentFromPath(attachment.path, attachment.contentType);
                        }
                        allureTest.addAttachment(attachment.name, attachment.contentType, fileName);
                        if (attachment.name === "diff") {
                            allureTest.addLabel("testType", "screenshotDiff");
                        }
                    }
                    for (const stdout of result.stdout) {
                        allureTest.addAttachment("stdout", "text/plain", runtime.writeAttachment(stdout, "text/plain"));
                    }
                    for (const stderr of result.stderr) {
                        allureTest.addAttachment("stderr", "text/plain", runtime.writeAttachment(stderr, "text/plain"));
                    }
                    allureTest.endTest(endTime);
                }
            }
            for (const child of suite.suites) {
                processSuite(child, group);
            }
            group.endGroup();
        };
        processSuite(this.suite, runtime);
        if (process.env.PW_ALLURE_POST_PROCESSOR_FOR_TEST) {
            try {
                const postProcess = eval(process.env.PW_ALLURE_POST_PROCESSOR_FOR_TEST);
                console.log(JSON.stringify(postProcess(writerForTest)));
            }
            catch (e) {
                console.log(JSON.stringify({ error: e.toString() }));
            }
        }
    }
}
const statusToAllureStats = (status, expectedStatus) => {
    if (status === "skipped") {
        return allure_js_commons_1.Status.SKIPPED;
    }
    if (status === "timedOut") {
        return allure_js_commons_1.Status.BROKEN;
    }
    if (status === expectedStatus) {
        return allure_js_commons_1.Status.PASSED;
    }
    return allure_js_commons_1.Status.FAILED;
};
exports.default = AllureReporter;
const asciiRegex = new RegExp("[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)|(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))", "g");
const stripAscii = (str) => {
    return str.replace(asciiRegex, "");
};
const appendStep = (parent, step) => {
    const allureStep = parent.startStep(step.title, step.startTime.getTime());
    allureStep.endStep(step.startTime.getTime() + step.duration);
    allureStep.status = step.error ? allure_js_commons_1.Status.FAILED : allure_js_commons_1.Status.PASSED;
    for (const child of step.steps || []) {
        appendStep(allureStep, child);
    }
};
//# sourceMappingURL=index.js.map